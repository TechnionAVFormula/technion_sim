// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state_est.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_state_5fest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_state_5fest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "perception.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_state_5fest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_state_5fest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_state_5fest_2eproto;
namespace TechnionFormulaAV {
namespace Messages {
class CarState;
class CarStateDefaultTypeInternal;
extern CarStateDefaultTypeInternal _CarState_default_instance_;
class ClusterInfo;
class ClusterInfoDefaultTypeInternal;
extern ClusterInfoDefaultTypeInternal _ClusterInfo_default_instance_;
class FormulaState;
class FormulaStateDefaultTypeInternal;
extern FormulaStateDefaultTypeInternal _FormulaState_default_instance_;
class StateCone;
class StateConeDefaultTypeInternal;
extern StateConeDefaultTypeInternal _StateCone_default_instance_;
}  // namespace Messages
}  // namespace TechnionFormulaAV
PROTOBUF_NAMESPACE_OPEN
template<> ::TechnionFormulaAV::Messages::CarState* Arena::CreateMaybeMessage<::TechnionFormulaAV::Messages::CarState>(Arena*);
template<> ::TechnionFormulaAV::Messages::ClusterInfo* Arena::CreateMaybeMessage<::TechnionFormulaAV::Messages::ClusterInfo>(Arena*);
template<> ::TechnionFormulaAV::Messages::FormulaState* Arena::CreateMaybeMessage<::TechnionFormulaAV::Messages::FormulaState>(Arena*);
template<> ::TechnionFormulaAV::Messages::StateCone* Arena::CreateMaybeMessage<::TechnionFormulaAV::Messages::StateCone>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TechnionFormulaAV {
namespace Messages {

enum FormulaStateMessageType : int {
  only_prediction = 0,
  prediction_and_correction = 1,
  still_calibrating = 2,
  finished_lap = 3,
  FormulaStateMessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FormulaStateMessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FormulaStateMessageType_IsValid(int value);
constexpr FormulaStateMessageType FormulaStateMessageType_MIN = only_prediction;
constexpr FormulaStateMessageType FormulaStateMessageType_MAX = finished_lap;
constexpr int FormulaStateMessageType_ARRAYSIZE = FormulaStateMessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FormulaStateMessageType_descriptor();
template<typename T>
inline const std::string& FormulaStateMessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FormulaStateMessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FormulaStateMessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FormulaStateMessageType_descriptor(), enum_t_value);
}
inline bool FormulaStateMessageType_Parse(
    const std::string& name, FormulaStateMessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FormulaStateMessageType>(
    FormulaStateMessageType_descriptor(), name, value);
}
// ===================================================================

class CarState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TechnionFormulaAV.Messages.CarState) */ {
 public:
  CarState();
  virtual ~CarState();

  CarState(const CarState& from);
  CarState(CarState&& from) noexcept
    : CarState() {
    *this = ::std::move(from);
  }

  inline CarState& operator=(const CarState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarState& operator=(CarState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CarState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CarState* internal_default_instance() {
    return reinterpret_cast<const CarState*>(
               &_CarState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CarState* other);
  friend void swap(CarState& a, CarState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CarState* New() const final {
    return CreateMaybeMessage<CarState>(nullptr);
  }

  CarState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CarState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CarState& from);
  void MergeFrom(const CarState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TechnionFormulaAV.Messages.CarState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5fest_2eproto);
    return ::descriptor_table_state_5fest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TechnionFormulaAV.Messages.Vector2D position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::TechnionFormulaAV::Messages::Vector2D& position() const;
  ::TechnionFormulaAV::Messages::Vector2D* release_position();
  ::TechnionFormulaAV::Messages::Vector2D* mutable_position();
  void set_allocated_position(::TechnionFormulaAV::Messages::Vector2D* position);

  // .TechnionFormulaAV.Messages.Vector2D position_deviation = 2;
  bool has_position_deviation() const;
  void clear_position_deviation();
  static const int kPositionDeviationFieldNumber = 2;
  const ::TechnionFormulaAV::Messages::Vector2D& position_deviation() const;
  ::TechnionFormulaAV::Messages::Vector2D* release_position_deviation();
  ::TechnionFormulaAV::Messages::Vector2D* mutable_position_deviation();
  void set_allocated_position_deviation(::TechnionFormulaAV::Messages::Vector2D* position_deviation);

  // .TechnionFormulaAV.Messages.Vector2D velocity = 3;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 3;
  const ::TechnionFormulaAV::Messages::Vector2D& velocity() const;
  ::TechnionFormulaAV::Messages::Vector2D* release_velocity();
  ::TechnionFormulaAV::Messages::Vector2D* mutable_velocity();
  void set_allocated_velocity(::TechnionFormulaAV::Messages::Vector2D* velocity);

  // .TechnionFormulaAV.Messages.Vector2D velocity_deviation = 4;
  bool has_velocity_deviation() const;
  void clear_velocity_deviation();
  static const int kVelocityDeviationFieldNumber = 4;
  const ::TechnionFormulaAV::Messages::Vector2D& velocity_deviation() const;
  ::TechnionFormulaAV::Messages::Vector2D* release_velocity_deviation();
  ::TechnionFormulaAV::Messages::Vector2D* mutable_velocity_deviation();
  void set_allocated_velocity_deviation(::TechnionFormulaAV::Messages::Vector2D* velocity_deviation);

  // double theta = 5;
  void clear_theta();
  static const int kThetaFieldNumber = 5;
  double theta() const;
  void set_theta(double value);

  // double theta_deviation = 6;
  void clear_theta_deviation();
  static const int kThetaDeviationFieldNumber = 6;
  double theta_deviation() const;
  void set_theta_deviation(double value);

  // double theta_dot = 7;
  void clear_theta_dot();
  static const int kThetaDotFieldNumber = 7;
  double theta_dot() const;
  void set_theta_dot(double value);

  // double theta_dot_deviation = 8;
  void clear_theta_dot_deviation();
  static const int kThetaDotDeviationFieldNumber = 8;
  double theta_dot_deviation() const;
  void set_theta_dot_deviation(double value);

  // double steering_angle = 9;
  void clear_steering_angle();
  static const int kSteeringAngleFieldNumber = 9;
  double steering_angle() const;
  void set_steering_angle(double value);

  // double steering_angle_deviation = 10;
  void clear_steering_angle_deviation();
  static const int kSteeringAngleDeviationFieldNumber = 10;
  double steering_angle_deviation() const;
  void set_steering_angle_deviation(double value);

  // double acceleration = 11;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 11;
  double acceleration() const;
  void set_acceleration(double value);

  // double acceleration_deviation = 12;
  void clear_acceleration_deviation();
  static const int kAccelerationDeviationFieldNumber = 12;
  double acceleration_deviation() const;
  void set_acceleration_deviation(double value);

  // @@protoc_insertion_point(class_scope:TechnionFormulaAV.Messages.CarState)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::TechnionFormulaAV::Messages::Vector2D* position_;
  ::TechnionFormulaAV::Messages::Vector2D* position_deviation_;
  ::TechnionFormulaAV::Messages::Vector2D* velocity_;
  ::TechnionFormulaAV::Messages::Vector2D* velocity_deviation_;
  double theta_;
  double theta_deviation_;
  double theta_dot_;
  double theta_dot_deviation_;
  double steering_angle_;
  double steering_angle_deviation_;
  double acceleration_;
  double acceleration_deviation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5fest_2eproto;
};
// -------------------------------------------------------------------

class ClusterInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TechnionFormulaAV.Messages.ClusterInfo) */ {
 public:
  ClusterInfo();
  virtual ~ClusterInfo();

  ClusterInfo(const ClusterInfo& from);
  ClusterInfo(ClusterInfo&& from) noexcept
    : ClusterInfo() {
    *this = ::std::move(from);
  }

  inline ClusterInfo& operator=(const ClusterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterInfo& operator=(ClusterInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClusterInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterInfo* internal_default_instance() {
    return reinterpret_cast<const ClusterInfo*>(
               &_ClusterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ClusterInfo* other);
  friend void swap(ClusterInfo& a, ClusterInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClusterInfo* New() const final {
    return CreateMaybeMessage<ClusterInfo>(nullptr);
  }

  ClusterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClusterInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClusterInfo& from);
  void MergeFrom(const ClusterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TechnionFormulaAV.Messages.ClusterInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5fest_2eproto);
    return ::descriptor_table_state_5fest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 age = 1;
  void clear_age();
  static const int kAgeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 num_of_cones = 2;
  void clear_num_of_cones();
  static const int kNumOfConesFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 num_of_cones() const;
  void set_num_of_cones(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double extra = 3;
  void clear_extra();
  static const int kExtraFieldNumber = 3;
  double extra() const;
  void set_extra(double value);

  // @@protoc_insertion_point(class_scope:TechnionFormulaAV.Messages.ClusterInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_of_cones_;
  double extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5fest_2eproto;
};
// -------------------------------------------------------------------

class StateCone :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TechnionFormulaAV.Messages.StateCone) */ {
 public:
  StateCone();
  virtual ~StateCone();

  StateCone(const StateCone& from);
  StateCone(StateCone&& from) noexcept
    : StateCone() {
    *this = ::std::move(from);
  }

  inline StateCone& operator=(const StateCone& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateCone& operator=(StateCone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateCone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateCone* internal_default_instance() {
    return reinterpret_cast<const StateCone*>(
               &_StateCone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(StateCone* other);
  friend void swap(StateCone& a, StateCone& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StateCone* New() const final {
    return CreateMaybeMessage<StateCone>(nullptr);
  }

  StateCone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateCone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateCone& from);
  void MergeFrom(const StateCone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateCone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TechnionFormulaAV.Messages.StateCone";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5fest_2eproto);
    return ::descriptor_table_state_5fest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TechnionFormulaAV.Messages.Vector2D position = 4;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 4;
  const ::TechnionFormulaAV::Messages::Vector2D& position() const;
  ::TechnionFormulaAV::Messages::Vector2D* release_position();
  ::TechnionFormulaAV::Messages::Vector2D* mutable_position();
  void set_allocated_position(::TechnionFormulaAV::Messages::Vector2D* position);

  // .TechnionFormulaAV.Messages.ClusterInfo cluster_info = 7;
  bool has_cluster_info() const;
  void clear_cluster_info();
  static const int kClusterInfoFieldNumber = 7;
  const ::TechnionFormulaAV::Messages::ClusterInfo& cluster_info() const;
  ::TechnionFormulaAV::Messages::ClusterInfo* release_cluster_info();
  ::TechnionFormulaAV::Messages::ClusterInfo* mutable_cluster_info();
  void set_allocated_cluster_info(::TechnionFormulaAV::Messages::ClusterInfo* cluster_info);

  // double r = 2;
  void clear_r();
  static const int kRFieldNumber = 2;
  double r() const;
  void set_r(double value);

  // double alpha = 3;
  void clear_alpha();
  static const int kAlphaFieldNumber = 3;
  double alpha() const;
  void set_alpha(double value);

  // uint32 cone_id = 1;
  void clear_cone_id();
  static const int kConeIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 cone_id() const;
  void set_cone_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .TechnionFormulaAV.Messages.ConeType type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::TechnionFormulaAV::Messages::ConeType type() const;
  void set_type(::TechnionFormulaAV::Messages::ConeType value);

  // double position_deviation = 6;
  void clear_position_deviation();
  static const int kPositionDeviationFieldNumber = 6;
  double position_deviation() const;
  void set_position_deviation(double value);

  // @@protoc_insertion_point(class_scope:TechnionFormulaAV.Messages.StateCone)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::TechnionFormulaAV::Messages::Vector2D* position_;
  ::TechnionFormulaAV::Messages::ClusterInfo* cluster_info_;
  double r_;
  double alpha_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cone_id_;
  int type_;
  double position_deviation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5fest_2eproto;
};
// -------------------------------------------------------------------

class FormulaState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TechnionFormulaAV.Messages.FormulaState) */ {
 public:
  FormulaState();
  virtual ~FormulaState();

  FormulaState(const FormulaState& from);
  FormulaState(FormulaState&& from) noexcept
    : FormulaState() {
    *this = ::std::move(from);
  }

  inline FormulaState& operator=(const FormulaState& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaState& operator=(FormulaState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FormulaState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FormulaState* internal_default_instance() {
    return reinterpret_cast<const FormulaState*>(
               &_FormulaState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FormulaState* other);
  friend void swap(FormulaState& a, FormulaState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FormulaState* New() const final {
    return CreateMaybeMessage<FormulaState>(nullptr);
  }

  FormulaState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormulaState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormulaState& from);
  void MergeFrom(const FormulaState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TechnionFormulaAV.Messages.FormulaState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_5fest_2eproto);
    return ::descriptor_table_state_5fest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TechnionFormulaAV.Messages.StateCone right_bound_cones = 1;
  int right_bound_cones_size() const;
  void clear_right_bound_cones();
  static const int kRightBoundConesFieldNumber = 1;
  ::TechnionFormulaAV::Messages::StateCone* mutable_right_bound_cones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >*
      mutable_right_bound_cones();
  const ::TechnionFormulaAV::Messages::StateCone& right_bound_cones(int index) const;
  ::TechnionFormulaAV::Messages::StateCone* add_right_bound_cones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >&
      right_bound_cones() const;

  // repeated .TechnionFormulaAV.Messages.StateCone left_bound_cones = 2;
  int left_bound_cones_size() const;
  void clear_left_bound_cones();
  static const int kLeftBoundConesFieldNumber = 2;
  ::TechnionFormulaAV::Messages::StateCone* mutable_left_bound_cones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >*
      mutable_left_bound_cones();
  const ::TechnionFormulaAV::Messages::StateCone& left_bound_cones(int index) const;
  ::TechnionFormulaAV::Messages::StateCone* add_left_bound_cones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >&
      left_bound_cones() const;

  // .TechnionFormulaAV.Messages.CarState current_state = 3;
  bool has_current_state() const;
  void clear_current_state();
  static const int kCurrentStateFieldNumber = 3;
  const ::TechnionFormulaAV::Messages::CarState& current_state() const;
  ::TechnionFormulaAV::Messages::CarState* release_current_state();
  ::TechnionFormulaAV::Messages::CarState* mutable_current_state();
  void set_allocated_current_state(::TechnionFormulaAV::Messages::CarState* current_state);

  // double distance_to_finish = 4;
  void clear_distance_to_finish();
  static const int kDistanceToFinishFieldNumber = 4;
  double distance_to_finish() const;
  void set_distance_to_finish(double value);

  // double distance_from_left = 6;
  void clear_distance_from_left();
  static const int kDistanceFromLeftFieldNumber = 6;
  double distance_from_left() const;
  void set_distance_from_left(double value);

  // double distance_from_right = 7;
  void clear_distance_from_right();
  static const int kDistanceFromRightFieldNumber = 7;
  double distance_from_right() const;
  void set_distance_from_right(double value);

  // double road_angle = 8;
  void clear_road_angle();
  static const int kRoadAngleFieldNumber = 8;
  double road_angle() const;
  void set_road_angle(double value);

  // .TechnionFormulaAV.Messages.FormulaStateMessageType message_type = 5;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 5;
  ::TechnionFormulaAV::Messages::FormulaStateMessageType message_type() const;
  void set_message_type(::TechnionFormulaAV::Messages::FormulaStateMessageType value);

  // @@protoc_insertion_point(class_scope:TechnionFormulaAV.Messages.FormulaState)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone > right_bound_cones_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone > left_bound_cones_;
  ::TechnionFormulaAV::Messages::CarState* current_state_;
  double distance_to_finish_;
  double distance_from_left_;
  double distance_from_right_;
  double road_angle_;
  int message_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5fest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CarState

// .TechnionFormulaAV.Messages.Vector2D position = 1;
inline bool CarState::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::TechnionFormulaAV::Messages::Vector2D& CarState::position() const {
  const ::TechnionFormulaAV::Messages::Vector2D* p = position_;
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.CarState.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::TechnionFormulaAV::Messages::Vector2D*>(
      &::TechnionFormulaAV::Messages::_Vector2D_default_instance_);
}
inline ::TechnionFormulaAV::Messages::Vector2D* CarState::release_position() {
  // @@protoc_insertion_point(field_release:TechnionFormulaAV.Messages.CarState.position)
  
  ::TechnionFormulaAV::Messages::Vector2D* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::TechnionFormulaAV::Messages::Vector2D* CarState::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::TechnionFormulaAV::Messages::Vector2D>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TechnionFormulaAV.Messages.CarState.position)
  return position_;
}
inline void CarState::set_allocated_position(::TechnionFormulaAV::Messages::Vector2D* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:TechnionFormulaAV.Messages.CarState.position)
}

// .TechnionFormulaAV.Messages.Vector2D position_deviation = 2;
inline bool CarState::has_position_deviation() const {
  return this != internal_default_instance() && position_deviation_ != nullptr;
}
inline const ::TechnionFormulaAV::Messages::Vector2D& CarState::position_deviation() const {
  const ::TechnionFormulaAV::Messages::Vector2D* p = position_deviation_;
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.CarState.position_deviation)
  return p != nullptr ? *p : *reinterpret_cast<const ::TechnionFormulaAV::Messages::Vector2D*>(
      &::TechnionFormulaAV::Messages::_Vector2D_default_instance_);
}
inline ::TechnionFormulaAV::Messages::Vector2D* CarState::release_position_deviation() {
  // @@protoc_insertion_point(field_release:TechnionFormulaAV.Messages.CarState.position_deviation)
  
  ::TechnionFormulaAV::Messages::Vector2D* temp = position_deviation_;
  position_deviation_ = nullptr;
  return temp;
}
inline ::TechnionFormulaAV::Messages::Vector2D* CarState::mutable_position_deviation() {
  
  if (position_deviation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TechnionFormulaAV::Messages::Vector2D>(GetArenaNoVirtual());
    position_deviation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TechnionFormulaAV.Messages.CarState.position_deviation)
  return position_deviation_;
}
inline void CarState::set_allocated_position_deviation(::TechnionFormulaAV::Messages::Vector2D* position_deviation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_deviation_);
  }
  if (position_deviation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position_deviation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_deviation, submessage_arena);
    }
    
  } else {
    
  }
  position_deviation_ = position_deviation;
  // @@protoc_insertion_point(field_set_allocated:TechnionFormulaAV.Messages.CarState.position_deviation)
}

// .TechnionFormulaAV.Messages.Vector2D velocity = 3;
inline bool CarState::has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline const ::TechnionFormulaAV::Messages::Vector2D& CarState::velocity() const {
  const ::TechnionFormulaAV::Messages::Vector2D* p = velocity_;
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.CarState.velocity)
  return p != nullptr ? *p : *reinterpret_cast<const ::TechnionFormulaAV::Messages::Vector2D*>(
      &::TechnionFormulaAV::Messages::_Vector2D_default_instance_);
}
inline ::TechnionFormulaAV::Messages::Vector2D* CarState::release_velocity() {
  // @@protoc_insertion_point(field_release:TechnionFormulaAV.Messages.CarState.velocity)
  
  ::TechnionFormulaAV::Messages::Vector2D* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::TechnionFormulaAV::Messages::Vector2D* CarState::mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::TechnionFormulaAV::Messages::Vector2D>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TechnionFormulaAV.Messages.CarState.velocity)
  return velocity_;
}
inline void CarState::set_allocated_velocity(::TechnionFormulaAV::Messages::Vector2D* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:TechnionFormulaAV.Messages.CarState.velocity)
}

// .TechnionFormulaAV.Messages.Vector2D velocity_deviation = 4;
inline bool CarState::has_velocity_deviation() const {
  return this != internal_default_instance() && velocity_deviation_ != nullptr;
}
inline const ::TechnionFormulaAV::Messages::Vector2D& CarState::velocity_deviation() const {
  const ::TechnionFormulaAV::Messages::Vector2D* p = velocity_deviation_;
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.CarState.velocity_deviation)
  return p != nullptr ? *p : *reinterpret_cast<const ::TechnionFormulaAV::Messages::Vector2D*>(
      &::TechnionFormulaAV::Messages::_Vector2D_default_instance_);
}
inline ::TechnionFormulaAV::Messages::Vector2D* CarState::release_velocity_deviation() {
  // @@protoc_insertion_point(field_release:TechnionFormulaAV.Messages.CarState.velocity_deviation)
  
  ::TechnionFormulaAV::Messages::Vector2D* temp = velocity_deviation_;
  velocity_deviation_ = nullptr;
  return temp;
}
inline ::TechnionFormulaAV::Messages::Vector2D* CarState::mutable_velocity_deviation() {
  
  if (velocity_deviation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TechnionFormulaAV::Messages::Vector2D>(GetArenaNoVirtual());
    velocity_deviation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TechnionFormulaAV.Messages.CarState.velocity_deviation)
  return velocity_deviation_;
}
inline void CarState::set_allocated_velocity_deviation(::TechnionFormulaAV::Messages::Vector2D* velocity_deviation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_deviation_);
  }
  if (velocity_deviation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity_deviation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_deviation, submessage_arena);
    }
    
  } else {
    
  }
  velocity_deviation_ = velocity_deviation;
  // @@protoc_insertion_point(field_set_allocated:TechnionFormulaAV.Messages.CarState.velocity_deviation)
}

// double theta = 5;
inline void CarState::clear_theta() {
  theta_ = 0;
}
inline double CarState::theta() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.CarState.theta)
  return theta_;
}
inline void CarState::set_theta(double value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.CarState.theta)
}

// double theta_deviation = 6;
inline void CarState::clear_theta_deviation() {
  theta_deviation_ = 0;
}
inline double CarState::theta_deviation() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.CarState.theta_deviation)
  return theta_deviation_;
}
inline void CarState::set_theta_deviation(double value) {
  
  theta_deviation_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.CarState.theta_deviation)
}

// double theta_dot = 7;
inline void CarState::clear_theta_dot() {
  theta_dot_ = 0;
}
inline double CarState::theta_dot() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.CarState.theta_dot)
  return theta_dot_;
}
inline void CarState::set_theta_dot(double value) {
  
  theta_dot_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.CarState.theta_dot)
}

// double theta_dot_deviation = 8;
inline void CarState::clear_theta_dot_deviation() {
  theta_dot_deviation_ = 0;
}
inline double CarState::theta_dot_deviation() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.CarState.theta_dot_deviation)
  return theta_dot_deviation_;
}
inline void CarState::set_theta_dot_deviation(double value) {
  
  theta_dot_deviation_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.CarState.theta_dot_deviation)
}

// double steering_angle = 9;
inline void CarState::clear_steering_angle() {
  steering_angle_ = 0;
}
inline double CarState::steering_angle() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.CarState.steering_angle)
  return steering_angle_;
}
inline void CarState::set_steering_angle(double value) {
  
  steering_angle_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.CarState.steering_angle)
}

// double steering_angle_deviation = 10;
inline void CarState::clear_steering_angle_deviation() {
  steering_angle_deviation_ = 0;
}
inline double CarState::steering_angle_deviation() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.CarState.steering_angle_deviation)
  return steering_angle_deviation_;
}
inline void CarState::set_steering_angle_deviation(double value) {
  
  steering_angle_deviation_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.CarState.steering_angle_deviation)
}

// double acceleration = 11;
inline void CarState::clear_acceleration() {
  acceleration_ = 0;
}
inline double CarState::acceleration() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.CarState.acceleration)
  return acceleration_;
}
inline void CarState::set_acceleration(double value) {
  
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.CarState.acceleration)
}

// double acceleration_deviation = 12;
inline void CarState::clear_acceleration_deviation() {
  acceleration_deviation_ = 0;
}
inline double CarState::acceleration_deviation() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.CarState.acceleration_deviation)
  return acceleration_deviation_;
}
inline void CarState::set_acceleration_deviation(double value) {
  
  acceleration_deviation_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.CarState.acceleration_deviation)
}

// -------------------------------------------------------------------

// ClusterInfo

// int32 age = 1;
inline void ClusterInfo::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClusterInfo::age() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.ClusterInfo.age)
  return age_;
}
inline void ClusterInfo::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.ClusterInfo.age)
}

// int32 num_of_cones = 2;
inline void ClusterInfo::clear_num_of_cones() {
  num_of_cones_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClusterInfo::num_of_cones() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.ClusterInfo.num_of_cones)
  return num_of_cones_;
}
inline void ClusterInfo::set_num_of_cones(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_of_cones_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.ClusterInfo.num_of_cones)
}

// double extra = 3;
inline void ClusterInfo::clear_extra() {
  extra_ = 0;
}
inline double ClusterInfo::extra() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.ClusterInfo.extra)
  return extra_;
}
inline void ClusterInfo::set_extra(double value) {
  
  extra_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.ClusterInfo.extra)
}

// -------------------------------------------------------------------

// StateCone

// uint32 cone_id = 1;
inline void StateCone::clear_cone_id() {
  cone_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StateCone::cone_id() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.StateCone.cone_id)
  return cone_id_;
}
inline void StateCone::set_cone_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cone_id_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.StateCone.cone_id)
}

// double r = 2;
inline void StateCone::clear_r() {
  r_ = 0;
}
inline double StateCone::r() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.StateCone.r)
  return r_;
}
inline void StateCone::set_r(double value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.StateCone.r)
}

// double alpha = 3;
inline void StateCone::clear_alpha() {
  alpha_ = 0;
}
inline double StateCone::alpha() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.StateCone.alpha)
  return alpha_;
}
inline void StateCone::set_alpha(double value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.StateCone.alpha)
}

// .TechnionFormulaAV.Messages.Vector2D position = 4;
inline bool StateCone::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::TechnionFormulaAV::Messages::Vector2D& StateCone::position() const {
  const ::TechnionFormulaAV::Messages::Vector2D* p = position_;
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.StateCone.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::TechnionFormulaAV::Messages::Vector2D*>(
      &::TechnionFormulaAV::Messages::_Vector2D_default_instance_);
}
inline ::TechnionFormulaAV::Messages::Vector2D* StateCone::release_position() {
  // @@protoc_insertion_point(field_release:TechnionFormulaAV.Messages.StateCone.position)
  
  ::TechnionFormulaAV::Messages::Vector2D* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::TechnionFormulaAV::Messages::Vector2D* StateCone::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::TechnionFormulaAV::Messages::Vector2D>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TechnionFormulaAV.Messages.StateCone.position)
  return position_;
}
inline void StateCone::set_allocated_position(::TechnionFormulaAV::Messages::Vector2D* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:TechnionFormulaAV.Messages.StateCone.position)
}

// .TechnionFormulaAV.Messages.ConeType type = 5;
inline void StateCone::clear_type() {
  type_ = 0;
}
inline ::TechnionFormulaAV::Messages::ConeType StateCone::type() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.StateCone.type)
  return static_cast< ::TechnionFormulaAV::Messages::ConeType >(type_);
}
inline void StateCone::set_type(::TechnionFormulaAV::Messages::ConeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.StateCone.type)
}

// double position_deviation = 6;
inline void StateCone::clear_position_deviation() {
  position_deviation_ = 0;
}
inline double StateCone::position_deviation() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.StateCone.position_deviation)
  return position_deviation_;
}
inline void StateCone::set_position_deviation(double value) {
  
  position_deviation_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.StateCone.position_deviation)
}

// .TechnionFormulaAV.Messages.ClusterInfo cluster_info = 7;
inline bool StateCone::has_cluster_info() const {
  return this != internal_default_instance() && cluster_info_ != nullptr;
}
inline void StateCone::clear_cluster_info() {
  if (GetArenaNoVirtual() == nullptr && cluster_info_ != nullptr) {
    delete cluster_info_;
  }
  cluster_info_ = nullptr;
}
inline const ::TechnionFormulaAV::Messages::ClusterInfo& StateCone::cluster_info() const {
  const ::TechnionFormulaAV::Messages::ClusterInfo* p = cluster_info_;
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.StateCone.cluster_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::TechnionFormulaAV::Messages::ClusterInfo*>(
      &::TechnionFormulaAV::Messages::_ClusterInfo_default_instance_);
}
inline ::TechnionFormulaAV::Messages::ClusterInfo* StateCone::release_cluster_info() {
  // @@protoc_insertion_point(field_release:TechnionFormulaAV.Messages.StateCone.cluster_info)
  
  ::TechnionFormulaAV::Messages::ClusterInfo* temp = cluster_info_;
  cluster_info_ = nullptr;
  return temp;
}
inline ::TechnionFormulaAV::Messages::ClusterInfo* StateCone::mutable_cluster_info() {
  
  if (cluster_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TechnionFormulaAV::Messages::ClusterInfo>(GetArenaNoVirtual());
    cluster_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TechnionFormulaAV.Messages.StateCone.cluster_info)
  return cluster_info_;
}
inline void StateCone::set_allocated_cluster_info(::TechnionFormulaAV::Messages::ClusterInfo* cluster_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cluster_info_;
  }
  if (cluster_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cluster_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cluster_info, submessage_arena);
    }
    
  } else {
    
  }
  cluster_info_ = cluster_info;
  // @@protoc_insertion_point(field_set_allocated:TechnionFormulaAV.Messages.StateCone.cluster_info)
}

// -------------------------------------------------------------------

// FormulaState

// repeated .TechnionFormulaAV.Messages.StateCone right_bound_cones = 1;
inline int FormulaState::right_bound_cones_size() const {
  return right_bound_cones_.size();
}
inline void FormulaState::clear_right_bound_cones() {
  right_bound_cones_.Clear();
}
inline ::TechnionFormulaAV::Messages::StateCone* FormulaState::mutable_right_bound_cones(int index) {
  // @@protoc_insertion_point(field_mutable:TechnionFormulaAV.Messages.FormulaState.right_bound_cones)
  return right_bound_cones_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >*
FormulaState::mutable_right_bound_cones() {
  // @@protoc_insertion_point(field_mutable_list:TechnionFormulaAV.Messages.FormulaState.right_bound_cones)
  return &right_bound_cones_;
}
inline const ::TechnionFormulaAV::Messages::StateCone& FormulaState::right_bound_cones(int index) const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.FormulaState.right_bound_cones)
  return right_bound_cones_.Get(index);
}
inline ::TechnionFormulaAV::Messages::StateCone* FormulaState::add_right_bound_cones() {
  // @@protoc_insertion_point(field_add:TechnionFormulaAV.Messages.FormulaState.right_bound_cones)
  return right_bound_cones_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >&
FormulaState::right_bound_cones() const {
  // @@protoc_insertion_point(field_list:TechnionFormulaAV.Messages.FormulaState.right_bound_cones)
  return right_bound_cones_;
}

// repeated .TechnionFormulaAV.Messages.StateCone left_bound_cones = 2;
inline int FormulaState::left_bound_cones_size() const {
  return left_bound_cones_.size();
}
inline void FormulaState::clear_left_bound_cones() {
  left_bound_cones_.Clear();
}
inline ::TechnionFormulaAV::Messages::StateCone* FormulaState::mutable_left_bound_cones(int index) {
  // @@protoc_insertion_point(field_mutable:TechnionFormulaAV.Messages.FormulaState.left_bound_cones)
  return left_bound_cones_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >*
FormulaState::mutable_left_bound_cones() {
  // @@protoc_insertion_point(field_mutable_list:TechnionFormulaAV.Messages.FormulaState.left_bound_cones)
  return &left_bound_cones_;
}
inline const ::TechnionFormulaAV::Messages::StateCone& FormulaState::left_bound_cones(int index) const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.FormulaState.left_bound_cones)
  return left_bound_cones_.Get(index);
}
inline ::TechnionFormulaAV::Messages::StateCone* FormulaState::add_left_bound_cones() {
  // @@protoc_insertion_point(field_add:TechnionFormulaAV.Messages.FormulaState.left_bound_cones)
  return left_bound_cones_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >&
FormulaState::left_bound_cones() const {
  // @@protoc_insertion_point(field_list:TechnionFormulaAV.Messages.FormulaState.left_bound_cones)
  return left_bound_cones_;
}

// .TechnionFormulaAV.Messages.CarState current_state = 3;
inline bool FormulaState::has_current_state() const {
  return this != internal_default_instance() && current_state_ != nullptr;
}
inline void FormulaState::clear_current_state() {
  if (GetArenaNoVirtual() == nullptr && current_state_ != nullptr) {
    delete current_state_;
  }
  current_state_ = nullptr;
}
inline const ::TechnionFormulaAV::Messages::CarState& FormulaState::current_state() const {
  const ::TechnionFormulaAV::Messages::CarState* p = current_state_;
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.FormulaState.current_state)
  return p != nullptr ? *p : *reinterpret_cast<const ::TechnionFormulaAV::Messages::CarState*>(
      &::TechnionFormulaAV::Messages::_CarState_default_instance_);
}
inline ::TechnionFormulaAV::Messages::CarState* FormulaState::release_current_state() {
  // @@protoc_insertion_point(field_release:TechnionFormulaAV.Messages.FormulaState.current_state)
  
  ::TechnionFormulaAV::Messages::CarState* temp = current_state_;
  current_state_ = nullptr;
  return temp;
}
inline ::TechnionFormulaAV::Messages::CarState* FormulaState::mutable_current_state() {
  
  if (current_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TechnionFormulaAV::Messages::CarState>(GetArenaNoVirtual());
    current_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TechnionFormulaAV.Messages.FormulaState.current_state)
  return current_state_;
}
inline void FormulaState::set_allocated_current_state(::TechnionFormulaAV::Messages::CarState* current_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete current_state_;
  }
  if (current_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      current_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_state, submessage_arena);
    }
    
  } else {
    
  }
  current_state_ = current_state;
  // @@protoc_insertion_point(field_set_allocated:TechnionFormulaAV.Messages.FormulaState.current_state)
}

// double distance_to_finish = 4;
inline void FormulaState::clear_distance_to_finish() {
  distance_to_finish_ = 0;
}
inline double FormulaState::distance_to_finish() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.FormulaState.distance_to_finish)
  return distance_to_finish_;
}
inline void FormulaState::set_distance_to_finish(double value) {
  
  distance_to_finish_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.FormulaState.distance_to_finish)
}

// .TechnionFormulaAV.Messages.FormulaStateMessageType message_type = 5;
inline void FormulaState::clear_message_type() {
  message_type_ = 0;
}
inline ::TechnionFormulaAV::Messages::FormulaStateMessageType FormulaState::message_type() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.FormulaState.message_type)
  return static_cast< ::TechnionFormulaAV::Messages::FormulaStateMessageType >(message_type_);
}
inline void FormulaState::set_message_type(::TechnionFormulaAV::Messages::FormulaStateMessageType value) {
  
  message_type_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.FormulaState.message_type)
}

// double distance_from_left = 6;
inline void FormulaState::clear_distance_from_left() {
  distance_from_left_ = 0;
}
inline double FormulaState::distance_from_left() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.FormulaState.distance_from_left)
  return distance_from_left_;
}
inline void FormulaState::set_distance_from_left(double value) {
  
  distance_from_left_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.FormulaState.distance_from_left)
}

// double distance_from_right = 7;
inline void FormulaState::clear_distance_from_right() {
  distance_from_right_ = 0;
}
inline double FormulaState::distance_from_right() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.FormulaState.distance_from_right)
  return distance_from_right_;
}
inline void FormulaState::set_distance_from_right(double value) {
  
  distance_from_right_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.FormulaState.distance_from_right)
}

// double road_angle = 8;
inline void FormulaState::clear_road_angle() {
  road_angle_ = 0;
}
inline double FormulaState::road_angle() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.FormulaState.road_angle)
  return road_angle_;
}
inline void FormulaState::set_road_angle(double value) {
  
  road_angle_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.FormulaState.road_angle)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages
}  // namespace TechnionFormulaAV

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TechnionFormulaAV::Messages::FormulaStateMessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TechnionFormulaAV::Messages::FormulaStateMessageType>() {
  return ::TechnionFormulaAV::Messages::FormulaStateMessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_state_5fest_2eproto
