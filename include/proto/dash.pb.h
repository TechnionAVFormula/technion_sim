// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dash.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dash_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dash_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "control.pb.h"
#include "state_est.pb.h"
#include "perception.pb.h"
#include "ground_truth.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dash_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dash_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dash_2eproto;
namespace TechnionFormulaAV {
namespace Messages {
class ControlDashbaord;
class ControlDashbaordDefaultTypeInternal;
extern ControlDashbaordDefaultTypeInternal _ControlDashbaord_default_instance_;
class FormulaStateDash;
class FormulaStateDashDefaultTypeInternal;
extern FormulaStateDashDefaultTypeInternal _FormulaStateDash_default_instance_;
class PerceptionDash;
class PerceptionDashDefaultTypeInternal;
extern PerceptionDashDefaultTypeInternal _PerceptionDash_default_instance_;
}  // namespace Messages
}  // namespace TechnionFormulaAV
PROTOBUF_NAMESPACE_OPEN
template<> ::TechnionFormulaAV::Messages::ControlDashbaord* Arena::CreateMaybeMessage<::TechnionFormulaAV::Messages::ControlDashbaord>(Arena*);
template<> ::TechnionFormulaAV::Messages::FormulaStateDash* Arena::CreateMaybeMessage<::TechnionFormulaAV::Messages::FormulaStateDash>(Arena*);
template<> ::TechnionFormulaAV::Messages::PerceptionDash* Arena::CreateMaybeMessage<::TechnionFormulaAV::Messages::PerceptionDash>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TechnionFormulaAV {
namespace Messages {

// ===================================================================

class ControlDashbaord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TechnionFormulaAV.Messages.ControlDashbaord) */ {
 public:
  ControlDashbaord();
  virtual ~ControlDashbaord();

  ControlDashbaord(const ControlDashbaord& from);
  ControlDashbaord(ControlDashbaord&& from) noexcept
    : ControlDashbaord() {
    *this = ::std::move(from);
  }

  inline ControlDashbaord& operator=(const ControlDashbaord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlDashbaord& operator=(ControlDashbaord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlDashbaord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlDashbaord* internal_default_instance() {
    return reinterpret_cast<const ControlDashbaord*>(
               &_ControlDashbaord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ControlDashbaord* other);
  friend void swap(ControlDashbaord& a, ControlDashbaord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlDashbaord* New() const final {
    return CreateMaybeMessage<ControlDashbaord>(nullptr);
  }

  ControlDashbaord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlDashbaord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlDashbaord& from);
  void MergeFrom(const ControlDashbaord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlDashbaord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TechnionFormulaAV.Messages.ControlDashbaord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dash_2eproto);
    return ::descriptor_table_dash_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float optimal_route = 5;
  int optimal_route_size() const;
  void clear_optimal_route();
  static const int kOptimalRouteFieldNumber = 5;
  float optimal_route(int index) const;
  void set_optimal_route(int index, float value);
  void add_optimal_route(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      optimal_route() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_optimal_route();

  // repeated float right_bound = 6;
  int right_bound_size() const;
  void clear_right_bound();
  static const int kRightBoundFieldNumber = 6;
  float right_bound(int index) const;
  void set_right_bound(int index, float value);
  void add_right_bound(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      right_bound() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_right_bound();

  // repeated float left_bound = 7;
  int left_bound_size() const;
  void clear_left_bound();
  static const int kLeftBoundFieldNumber = 7;
  float left_bound(int index) const;
  void set_left_bound(int index, float value);
  void add_left_bound(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      left_bound() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_left_bound();

  // repeated .TechnionFormulaAV.Messages.StateCone right_bound_cones = 8;
  int right_bound_cones_size() const;
  void clear_right_bound_cones();
  static const int kRightBoundConesFieldNumber = 8;
  ::TechnionFormulaAV::Messages::StateCone* mutable_right_bound_cones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >*
      mutable_right_bound_cones();
  const ::TechnionFormulaAV::Messages::StateCone& right_bound_cones(int index) const;
  ::TechnionFormulaAV::Messages::StateCone* add_right_bound_cones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >&
      right_bound_cones() const;

  // repeated .TechnionFormulaAV.Messages.StateCone left_bound_cones = 9;
  int left_bound_cones_size() const;
  void clear_left_bound_cones();
  static const int kLeftBoundConesFieldNumber = 9;
  ::TechnionFormulaAV::Messages::StateCone* mutable_left_bound_cones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >*
      mutable_left_bound_cones();
  const ::TechnionFormulaAV::Messages::StateCone& left_bound_cones(int index) const;
  ::TechnionFormulaAV::Messages::StateCone* add_left_bound_cones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >&
      left_bound_cones() const;

  // .TechnionFormulaAV.Messages.DriveInstructions instructions = 1;
  bool has_instructions() const;
  void clear_instructions();
  static const int kInstructionsFieldNumber = 1;
  const ::TechnionFormulaAV::Messages::DriveInstructions& instructions() const;
  ::TechnionFormulaAV::Messages::DriveInstructions* release_instructions();
  ::TechnionFormulaAV::Messages::DriveInstructions* mutable_instructions();
  void set_allocated_instructions(::TechnionFormulaAV::Messages::DriveInstructions* instructions);

  // .TechnionFormulaAV.Messages.Vector2D current_position = 2;
  bool has_current_position() const;
  void clear_current_position();
  static const int kCurrentPositionFieldNumber = 2;
  const ::TechnionFormulaAV::Messages::Vector2D& current_position() const;
  ::TechnionFormulaAV::Messages::Vector2D* release_current_position();
  ::TechnionFormulaAV::Messages::Vector2D* mutable_current_position();
  void set_allocated_current_position(::TechnionFormulaAV::Messages::Vector2D* current_position);

  // float current_steering_angle = 3;
  void clear_current_steering_angle();
  static const int kCurrentSteeringAngleFieldNumber = 3;
  float current_steering_angle() const;
  void set_current_steering_angle(float value);

  // float current_speed = 4;
  void clear_current_speed();
  static const int kCurrentSpeedFieldNumber = 4;
  float current_speed() const;
  void set_current_speed(float value);

  // @@protoc_insertion_point(class_scope:TechnionFormulaAV.Messages.ControlDashbaord)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > optimal_route_;
  mutable std::atomic<int> _optimal_route_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > right_bound_;
  mutable std::atomic<int> _right_bound_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > left_bound_;
  mutable std::atomic<int> _left_bound_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone > right_bound_cones_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone > left_bound_cones_;
  ::TechnionFormulaAV::Messages::DriveInstructions* instructions_;
  ::TechnionFormulaAV::Messages::Vector2D* current_position_;
  float current_steering_angle_;
  float current_speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dash_2eproto;
};
// -------------------------------------------------------------------

class FormulaStateDash :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TechnionFormulaAV.Messages.FormulaStateDash) */ {
 public:
  FormulaStateDash();
  virtual ~FormulaStateDash();

  FormulaStateDash(const FormulaStateDash& from);
  FormulaStateDash(FormulaStateDash&& from) noexcept
    : FormulaStateDash() {
    *this = ::std::move(from);
  }

  inline FormulaStateDash& operator=(const FormulaStateDash& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormulaStateDash& operator=(FormulaStateDash&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FormulaStateDash& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FormulaStateDash* internal_default_instance() {
    return reinterpret_cast<const FormulaStateDash*>(
               &_FormulaStateDash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FormulaStateDash* other);
  friend void swap(FormulaStateDash& a, FormulaStateDash& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FormulaStateDash* New() const final {
    return CreateMaybeMessage<FormulaStateDash>(nullptr);
  }

  FormulaStateDash* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormulaStateDash>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormulaStateDash& from);
  void MergeFrom(const FormulaStateDash& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormulaStateDash* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TechnionFormulaAV.Messages.FormulaStateDash";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dash_2eproto);
    return ::descriptor_table_dash_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TechnionFormulaAV.Messages.StateCone cone_samples = 2;
  int cone_samples_size() const;
  void clear_cone_samples();
  static const int kConeSamplesFieldNumber = 2;
  ::TechnionFormulaAV::Messages::StateCone* mutable_cone_samples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >*
      mutable_cone_samples();
  const ::TechnionFormulaAV::Messages::StateCone& cone_samples(int index) const;
  ::TechnionFormulaAV::Messages::StateCone* add_cone_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >&
      cone_samples() const;

  // repeated .TechnionFormulaAV.Messages.StateCone cone_clusters = 3;
  int cone_clusters_size() const;
  void clear_cone_clusters();
  static const int kConeClustersFieldNumber = 3;
  ::TechnionFormulaAV::Messages::StateCone* mutable_cone_clusters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >*
      mutable_cone_clusters();
  const ::TechnionFormulaAV::Messages::StateCone& cone_clusters(int index) const;
  ::TechnionFormulaAV::Messages::StateCone* add_cone_clusters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >&
      cone_clusters() const;

  // .TechnionFormulaAV.Messages.FormulaState formula_state_message = 1;
  bool has_formula_state_message() const;
  void clear_formula_state_message();
  static const int kFormulaStateMessageFieldNumber = 1;
  const ::TechnionFormulaAV::Messages::FormulaState& formula_state_message() const;
  ::TechnionFormulaAV::Messages::FormulaState* release_formula_state_message();
  ::TechnionFormulaAV::Messages::FormulaState* mutable_formula_state_message();
  void set_allocated_formula_state_message(::TechnionFormulaAV::Messages::FormulaState* formula_state_message);

  // .TechnionFormulaAV.Messages.StateGroundTruth ground_truth = 4;
  bool has_ground_truth() const;
  void clear_ground_truth();
  static const int kGroundTruthFieldNumber = 4;
  const ::TechnionFormulaAV::Messages::StateGroundTruth& ground_truth() const;
  ::TechnionFormulaAV::Messages::StateGroundTruth* release_ground_truth();
  ::TechnionFormulaAV::Messages::StateGroundTruth* mutable_ground_truth();
  void set_allocated_ground_truth(::TechnionFormulaAV::Messages::StateGroundTruth* ground_truth);

  // @@protoc_insertion_point(class_scope:TechnionFormulaAV.Messages.FormulaStateDash)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone > cone_samples_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone > cone_clusters_;
  ::TechnionFormulaAV::Messages::FormulaState* formula_state_message_;
  ::TechnionFormulaAV::Messages::StateGroundTruth* ground_truth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dash_2eproto;
};
// -------------------------------------------------------------------

class PerceptionDash :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TechnionFormulaAV.Messages.PerceptionDash) */ {
 public:
  PerceptionDash();
  virtual ~PerceptionDash();

  PerceptionDash(const PerceptionDash& from);
  PerceptionDash(PerceptionDash&& from) noexcept
    : PerceptionDash() {
    *this = ::std::move(from);
  }

  inline PerceptionDash& operator=(const PerceptionDash& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerceptionDash& operator=(PerceptionDash&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PerceptionDash& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerceptionDash* internal_default_instance() {
    return reinterpret_cast<const PerceptionDash*>(
               &_PerceptionDash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PerceptionDash* other);
  friend void swap(PerceptionDash& a, PerceptionDash& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PerceptionDash* New() const final {
    return CreateMaybeMessage<PerceptionDash>(nullptr);
  }

  PerceptionDash* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerceptionDash>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PerceptionDash& from);
  void MergeFrom(const PerceptionDash& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerceptionDash* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TechnionFormulaAV.Messages.PerceptionDash";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dash_2eproto);
    return ::descriptor_table_dash_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TechnionFormulaAV.Messages.BoundingBox bbs = 1;
  int bbs_size() const;
  void clear_bbs();
  static const int kBbsFieldNumber = 1;
  ::TechnionFormulaAV::Messages::BoundingBox* mutable_bbs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::BoundingBox >*
      mutable_bbs();
  const ::TechnionFormulaAV::Messages::BoundingBox& bbs(int index) const;
  ::TechnionFormulaAV::Messages::BoundingBox* add_bbs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::BoundingBox >&
      bbs() const;

  // .TechnionFormulaAV.Messages.ConeMap cone_map = 2;
  bool has_cone_map() const;
  void clear_cone_map();
  static const int kConeMapFieldNumber = 2;
  const ::TechnionFormulaAV::Messages::ConeMap& cone_map() const;
  ::TechnionFormulaAV::Messages::ConeMap* release_cone_map();
  ::TechnionFormulaAV::Messages::ConeMap* mutable_cone_map();
  void set_allocated_cone_map(::TechnionFormulaAV::Messages::ConeMap* cone_map);

  // @@protoc_insertion_point(class_scope:TechnionFormulaAV.Messages.PerceptionDash)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::BoundingBox > bbs_;
  ::TechnionFormulaAV::Messages::ConeMap* cone_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dash_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlDashbaord

// .TechnionFormulaAV.Messages.DriveInstructions instructions = 1;
inline bool ControlDashbaord::has_instructions() const {
  return this != internal_default_instance() && instructions_ != nullptr;
}
inline const ::TechnionFormulaAV::Messages::DriveInstructions& ControlDashbaord::instructions() const {
  const ::TechnionFormulaAV::Messages::DriveInstructions* p = instructions_;
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.ControlDashbaord.instructions)
  return p != nullptr ? *p : *reinterpret_cast<const ::TechnionFormulaAV::Messages::DriveInstructions*>(
      &::TechnionFormulaAV::Messages::_DriveInstructions_default_instance_);
}
inline ::TechnionFormulaAV::Messages::DriveInstructions* ControlDashbaord::release_instructions() {
  // @@protoc_insertion_point(field_release:TechnionFormulaAV.Messages.ControlDashbaord.instructions)
  
  ::TechnionFormulaAV::Messages::DriveInstructions* temp = instructions_;
  instructions_ = nullptr;
  return temp;
}
inline ::TechnionFormulaAV::Messages::DriveInstructions* ControlDashbaord::mutable_instructions() {
  
  if (instructions_ == nullptr) {
    auto* p = CreateMaybeMessage<::TechnionFormulaAV::Messages::DriveInstructions>(GetArenaNoVirtual());
    instructions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TechnionFormulaAV.Messages.ControlDashbaord.instructions)
  return instructions_;
}
inline void ControlDashbaord::set_allocated_instructions(::TechnionFormulaAV::Messages::DriveInstructions* instructions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(instructions_);
  }
  if (instructions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      instructions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instructions, submessage_arena);
    }
    
  } else {
    
  }
  instructions_ = instructions;
  // @@protoc_insertion_point(field_set_allocated:TechnionFormulaAV.Messages.ControlDashbaord.instructions)
}

// .TechnionFormulaAV.Messages.Vector2D current_position = 2;
inline bool ControlDashbaord::has_current_position() const {
  return this != internal_default_instance() && current_position_ != nullptr;
}
inline const ::TechnionFormulaAV::Messages::Vector2D& ControlDashbaord::current_position() const {
  const ::TechnionFormulaAV::Messages::Vector2D* p = current_position_;
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.ControlDashbaord.current_position)
  return p != nullptr ? *p : *reinterpret_cast<const ::TechnionFormulaAV::Messages::Vector2D*>(
      &::TechnionFormulaAV::Messages::_Vector2D_default_instance_);
}
inline ::TechnionFormulaAV::Messages::Vector2D* ControlDashbaord::release_current_position() {
  // @@protoc_insertion_point(field_release:TechnionFormulaAV.Messages.ControlDashbaord.current_position)
  
  ::TechnionFormulaAV::Messages::Vector2D* temp = current_position_;
  current_position_ = nullptr;
  return temp;
}
inline ::TechnionFormulaAV::Messages::Vector2D* ControlDashbaord::mutable_current_position() {
  
  if (current_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::TechnionFormulaAV::Messages::Vector2D>(GetArenaNoVirtual());
    current_position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TechnionFormulaAV.Messages.ControlDashbaord.current_position)
  return current_position_;
}
inline void ControlDashbaord::set_allocated_current_position(::TechnionFormulaAV::Messages::Vector2D* current_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_position_);
  }
  if (current_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      current_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_position, submessage_arena);
    }
    
  } else {
    
  }
  current_position_ = current_position;
  // @@protoc_insertion_point(field_set_allocated:TechnionFormulaAV.Messages.ControlDashbaord.current_position)
}

// float current_steering_angle = 3;
inline void ControlDashbaord::clear_current_steering_angle() {
  current_steering_angle_ = 0;
}
inline float ControlDashbaord::current_steering_angle() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.ControlDashbaord.current_steering_angle)
  return current_steering_angle_;
}
inline void ControlDashbaord::set_current_steering_angle(float value) {
  
  current_steering_angle_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.ControlDashbaord.current_steering_angle)
}

// float current_speed = 4;
inline void ControlDashbaord::clear_current_speed() {
  current_speed_ = 0;
}
inline float ControlDashbaord::current_speed() const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.ControlDashbaord.current_speed)
  return current_speed_;
}
inline void ControlDashbaord::set_current_speed(float value) {
  
  current_speed_ = value;
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.ControlDashbaord.current_speed)
}

// repeated float optimal_route = 5;
inline int ControlDashbaord::optimal_route_size() const {
  return optimal_route_.size();
}
inline void ControlDashbaord::clear_optimal_route() {
  optimal_route_.Clear();
}
inline float ControlDashbaord::optimal_route(int index) const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.ControlDashbaord.optimal_route)
  return optimal_route_.Get(index);
}
inline void ControlDashbaord::set_optimal_route(int index, float value) {
  optimal_route_.Set(index, value);
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.ControlDashbaord.optimal_route)
}
inline void ControlDashbaord::add_optimal_route(float value) {
  optimal_route_.Add(value);
  // @@protoc_insertion_point(field_add:TechnionFormulaAV.Messages.ControlDashbaord.optimal_route)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlDashbaord::optimal_route() const {
  // @@protoc_insertion_point(field_list:TechnionFormulaAV.Messages.ControlDashbaord.optimal_route)
  return optimal_route_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlDashbaord::mutable_optimal_route() {
  // @@protoc_insertion_point(field_mutable_list:TechnionFormulaAV.Messages.ControlDashbaord.optimal_route)
  return &optimal_route_;
}

// repeated float right_bound = 6;
inline int ControlDashbaord::right_bound_size() const {
  return right_bound_.size();
}
inline void ControlDashbaord::clear_right_bound() {
  right_bound_.Clear();
}
inline float ControlDashbaord::right_bound(int index) const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.ControlDashbaord.right_bound)
  return right_bound_.Get(index);
}
inline void ControlDashbaord::set_right_bound(int index, float value) {
  right_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.ControlDashbaord.right_bound)
}
inline void ControlDashbaord::add_right_bound(float value) {
  right_bound_.Add(value);
  // @@protoc_insertion_point(field_add:TechnionFormulaAV.Messages.ControlDashbaord.right_bound)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlDashbaord::right_bound() const {
  // @@protoc_insertion_point(field_list:TechnionFormulaAV.Messages.ControlDashbaord.right_bound)
  return right_bound_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlDashbaord::mutable_right_bound() {
  // @@protoc_insertion_point(field_mutable_list:TechnionFormulaAV.Messages.ControlDashbaord.right_bound)
  return &right_bound_;
}

// repeated float left_bound = 7;
inline int ControlDashbaord::left_bound_size() const {
  return left_bound_.size();
}
inline void ControlDashbaord::clear_left_bound() {
  left_bound_.Clear();
}
inline float ControlDashbaord::left_bound(int index) const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.ControlDashbaord.left_bound)
  return left_bound_.Get(index);
}
inline void ControlDashbaord::set_left_bound(int index, float value) {
  left_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:TechnionFormulaAV.Messages.ControlDashbaord.left_bound)
}
inline void ControlDashbaord::add_left_bound(float value) {
  left_bound_.Add(value);
  // @@protoc_insertion_point(field_add:TechnionFormulaAV.Messages.ControlDashbaord.left_bound)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ControlDashbaord::left_bound() const {
  // @@protoc_insertion_point(field_list:TechnionFormulaAV.Messages.ControlDashbaord.left_bound)
  return left_bound_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ControlDashbaord::mutable_left_bound() {
  // @@protoc_insertion_point(field_mutable_list:TechnionFormulaAV.Messages.ControlDashbaord.left_bound)
  return &left_bound_;
}

// repeated .TechnionFormulaAV.Messages.StateCone right_bound_cones = 8;
inline int ControlDashbaord::right_bound_cones_size() const {
  return right_bound_cones_.size();
}
inline ::TechnionFormulaAV::Messages::StateCone* ControlDashbaord::mutable_right_bound_cones(int index) {
  // @@protoc_insertion_point(field_mutable:TechnionFormulaAV.Messages.ControlDashbaord.right_bound_cones)
  return right_bound_cones_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >*
ControlDashbaord::mutable_right_bound_cones() {
  // @@protoc_insertion_point(field_mutable_list:TechnionFormulaAV.Messages.ControlDashbaord.right_bound_cones)
  return &right_bound_cones_;
}
inline const ::TechnionFormulaAV::Messages::StateCone& ControlDashbaord::right_bound_cones(int index) const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.ControlDashbaord.right_bound_cones)
  return right_bound_cones_.Get(index);
}
inline ::TechnionFormulaAV::Messages::StateCone* ControlDashbaord::add_right_bound_cones() {
  // @@protoc_insertion_point(field_add:TechnionFormulaAV.Messages.ControlDashbaord.right_bound_cones)
  return right_bound_cones_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >&
ControlDashbaord::right_bound_cones() const {
  // @@protoc_insertion_point(field_list:TechnionFormulaAV.Messages.ControlDashbaord.right_bound_cones)
  return right_bound_cones_;
}

// repeated .TechnionFormulaAV.Messages.StateCone left_bound_cones = 9;
inline int ControlDashbaord::left_bound_cones_size() const {
  return left_bound_cones_.size();
}
inline ::TechnionFormulaAV::Messages::StateCone* ControlDashbaord::mutable_left_bound_cones(int index) {
  // @@protoc_insertion_point(field_mutable:TechnionFormulaAV.Messages.ControlDashbaord.left_bound_cones)
  return left_bound_cones_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >*
ControlDashbaord::mutable_left_bound_cones() {
  // @@protoc_insertion_point(field_mutable_list:TechnionFormulaAV.Messages.ControlDashbaord.left_bound_cones)
  return &left_bound_cones_;
}
inline const ::TechnionFormulaAV::Messages::StateCone& ControlDashbaord::left_bound_cones(int index) const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.ControlDashbaord.left_bound_cones)
  return left_bound_cones_.Get(index);
}
inline ::TechnionFormulaAV::Messages::StateCone* ControlDashbaord::add_left_bound_cones() {
  // @@protoc_insertion_point(field_add:TechnionFormulaAV.Messages.ControlDashbaord.left_bound_cones)
  return left_bound_cones_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >&
ControlDashbaord::left_bound_cones() const {
  // @@protoc_insertion_point(field_list:TechnionFormulaAV.Messages.ControlDashbaord.left_bound_cones)
  return left_bound_cones_;
}

// -------------------------------------------------------------------

// FormulaStateDash

// .TechnionFormulaAV.Messages.FormulaState formula_state_message = 1;
inline bool FormulaStateDash::has_formula_state_message() const {
  return this != internal_default_instance() && formula_state_message_ != nullptr;
}
inline const ::TechnionFormulaAV::Messages::FormulaState& FormulaStateDash::formula_state_message() const {
  const ::TechnionFormulaAV::Messages::FormulaState* p = formula_state_message_;
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.FormulaStateDash.formula_state_message)
  return p != nullptr ? *p : *reinterpret_cast<const ::TechnionFormulaAV::Messages::FormulaState*>(
      &::TechnionFormulaAV::Messages::_FormulaState_default_instance_);
}
inline ::TechnionFormulaAV::Messages::FormulaState* FormulaStateDash::release_formula_state_message() {
  // @@protoc_insertion_point(field_release:TechnionFormulaAV.Messages.FormulaStateDash.formula_state_message)
  
  ::TechnionFormulaAV::Messages::FormulaState* temp = formula_state_message_;
  formula_state_message_ = nullptr;
  return temp;
}
inline ::TechnionFormulaAV::Messages::FormulaState* FormulaStateDash::mutable_formula_state_message() {
  
  if (formula_state_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::TechnionFormulaAV::Messages::FormulaState>(GetArenaNoVirtual());
    formula_state_message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TechnionFormulaAV.Messages.FormulaStateDash.formula_state_message)
  return formula_state_message_;
}
inline void FormulaStateDash::set_allocated_formula_state_message(::TechnionFormulaAV::Messages::FormulaState* formula_state_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(formula_state_message_);
  }
  if (formula_state_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      formula_state_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, formula_state_message, submessage_arena);
    }
    
  } else {
    
  }
  formula_state_message_ = formula_state_message;
  // @@protoc_insertion_point(field_set_allocated:TechnionFormulaAV.Messages.FormulaStateDash.formula_state_message)
}

// repeated .TechnionFormulaAV.Messages.StateCone cone_samples = 2;
inline int FormulaStateDash::cone_samples_size() const {
  return cone_samples_.size();
}
inline ::TechnionFormulaAV::Messages::StateCone* FormulaStateDash::mutable_cone_samples(int index) {
  // @@protoc_insertion_point(field_mutable:TechnionFormulaAV.Messages.FormulaStateDash.cone_samples)
  return cone_samples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >*
FormulaStateDash::mutable_cone_samples() {
  // @@protoc_insertion_point(field_mutable_list:TechnionFormulaAV.Messages.FormulaStateDash.cone_samples)
  return &cone_samples_;
}
inline const ::TechnionFormulaAV::Messages::StateCone& FormulaStateDash::cone_samples(int index) const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.FormulaStateDash.cone_samples)
  return cone_samples_.Get(index);
}
inline ::TechnionFormulaAV::Messages::StateCone* FormulaStateDash::add_cone_samples() {
  // @@protoc_insertion_point(field_add:TechnionFormulaAV.Messages.FormulaStateDash.cone_samples)
  return cone_samples_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >&
FormulaStateDash::cone_samples() const {
  // @@protoc_insertion_point(field_list:TechnionFormulaAV.Messages.FormulaStateDash.cone_samples)
  return cone_samples_;
}

// repeated .TechnionFormulaAV.Messages.StateCone cone_clusters = 3;
inline int FormulaStateDash::cone_clusters_size() const {
  return cone_clusters_.size();
}
inline ::TechnionFormulaAV::Messages::StateCone* FormulaStateDash::mutable_cone_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:TechnionFormulaAV.Messages.FormulaStateDash.cone_clusters)
  return cone_clusters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >*
FormulaStateDash::mutable_cone_clusters() {
  // @@protoc_insertion_point(field_mutable_list:TechnionFormulaAV.Messages.FormulaStateDash.cone_clusters)
  return &cone_clusters_;
}
inline const ::TechnionFormulaAV::Messages::StateCone& FormulaStateDash::cone_clusters(int index) const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.FormulaStateDash.cone_clusters)
  return cone_clusters_.Get(index);
}
inline ::TechnionFormulaAV::Messages::StateCone* FormulaStateDash::add_cone_clusters() {
  // @@protoc_insertion_point(field_add:TechnionFormulaAV.Messages.FormulaStateDash.cone_clusters)
  return cone_clusters_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::StateCone >&
FormulaStateDash::cone_clusters() const {
  // @@protoc_insertion_point(field_list:TechnionFormulaAV.Messages.FormulaStateDash.cone_clusters)
  return cone_clusters_;
}

// .TechnionFormulaAV.Messages.StateGroundTruth ground_truth = 4;
inline bool FormulaStateDash::has_ground_truth() const {
  return this != internal_default_instance() && ground_truth_ != nullptr;
}
inline const ::TechnionFormulaAV::Messages::StateGroundTruth& FormulaStateDash::ground_truth() const {
  const ::TechnionFormulaAV::Messages::StateGroundTruth* p = ground_truth_;
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.FormulaStateDash.ground_truth)
  return p != nullptr ? *p : *reinterpret_cast<const ::TechnionFormulaAV::Messages::StateGroundTruth*>(
      &::TechnionFormulaAV::Messages::_StateGroundTruth_default_instance_);
}
inline ::TechnionFormulaAV::Messages::StateGroundTruth* FormulaStateDash::release_ground_truth() {
  // @@protoc_insertion_point(field_release:TechnionFormulaAV.Messages.FormulaStateDash.ground_truth)
  
  ::TechnionFormulaAV::Messages::StateGroundTruth* temp = ground_truth_;
  ground_truth_ = nullptr;
  return temp;
}
inline ::TechnionFormulaAV::Messages::StateGroundTruth* FormulaStateDash::mutable_ground_truth() {
  
  if (ground_truth_ == nullptr) {
    auto* p = CreateMaybeMessage<::TechnionFormulaAV::Messages::StateGroundTruth>(GetArenaNoVirtual());
    ground_truth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TechnionFormulaAV.Messages.FormulaStateDash.ground_truth)
  return ground_truth_;
}
inline void FormulaStateDash::set_allocated_ground_truth(::TechnionFormulaAV::Messages::StateGroundTruth* ground_truth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ground_truth_);
  }
  if (ground_truth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ground_truth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ground_truth, submessage_arena);
    }
    
  } else {
    
  }
  ground_truth_ = ground_truth;
  // @@protoc_insertion_point(field_set_allocated:TechnionFormulaAV.Messages.FormulaStateDash.ground_truth)
}

// -------------------------------------------------------------------

// PerceptionDash

// repeated .TechnionFormulaAV.Messages.BoundingBox bbs = 1;
inline int PerceptionDash::bbs_size() const {
  return bbs_.size();
}
inline ::TechnionFormulaAV::Messages::BoundingBox* PerceptionDash::mutable_bbs(int index) {
  // @@protoc_insertion_point(field_mutable:TechnionFormulaAV.Messages.PerceptionDash.bbs)
  return bbs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::BoundingBox >*
PerceptionDash::mutable_bbs() {
  // @@protoc_insertion_point(field_mutable_list:TechnionFormulaAV.Messages.PerceptionDash.bbs)
  return &bbs_;
}
inline const ::TechnionFormulaAV::Messages::BoundingBox& PerceptionDash::bbs(int index) const {
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.PerceptionDash.bbs)
  return bbs_.Get(index);
}
inline ::TechnionFormulaAV::Messages::BoundingBox* PerceptionDash::add_bbs() {
  // @@protoc_insertion_point(field_add:TechnionFormulaAV.Messages.PerceptionDash.bbs)
  return bbs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TechnionFormulaAV::Messages::BoundingBox >&
PerceptionDash::bbs() const {
  // @@protoc_insertion_point(field_list:TechnionFormulaAV.Messages.PerceptionDash.bbs)
  return bbs_;
}

// .TechnionFormulaAV.Messages.ConeMap cone_map = 2;
inline bool PerceptionDash::has_cone_map() const {
  return this != internal_default_instance() && cone_map_ != nullptr;
}
inline const ::TechnionFormulaAV::Messages::ConeMap& PerceptionDash::cone_map() const {
  const ::TechnionFormulaAV::Messages::ConeMap* p = cone_map_;
  // @@protoc_insertion_point(field_get:TechnionFormulaAV.Messages.PerceptionDash.cone_map)
  return p != nullptr ? *p : *reinterpret_cast<const ::TechnionFormulaAV::Messages::ConeMap*>(
      &::TechnionFormulaAV::Messages::_ConeMap_default_instance_);
}
inline ::TechnionFormulaAV::Messages::ConeMap* PerceptionDash::release_cone_map() {
  // @@protoc_insertion_point(field_release:TechnionFormulaAV.Messages.PerceptionDash.cone_map)
  
  ::TechnionFormulaAV::Messages::ConeMap* temp = cone_map_;
  cone_map_ = nullptr;
  return temp;
}
inline ::TechnionFormulaAV::Messages::ConeMap* PerceptionDash::mutable_cone_map() {
  
  if (cone_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TechnionFormulaAV::Messages::ConeMap>(GetArenaNoVirtual());
    cone_map_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TechnionFormulaAV.Messages.PerceptionDash.cone_map)
  return cone_map_;
}
inline void PerceptionDash::set_allocated_cone_map(::TechnionFormulaAV::Messages::ConeMap* cone_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cone_map_);
  }
  if (cone_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cone_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cone_map, submessage_arena);
    }
    
  } else {
    
  }
  cone_map_ = cone_map;
  // @@protoc_insertion_point(field_set_allocated:TechnionFormulaAV.Messages.PerceptionDash.cone_map)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages
}  // namespace TechnionFormulaAV

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dash_2eproto
